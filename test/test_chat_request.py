# coding: utf-8

"""
    DeepAPI

    Our AI API service offers a seamless and efficient solution for businesses and individuals seeking to leverage the power of artificial intelligence without the complexity and cost of managing their infrastructure. By choosing DeepAPI, you eliminate the need to invest in and maintain expensive servers and GPUs, as we provide a robust, scalable, cloud-based platform operating out of multiple data centers that ensures high performance, low latency and reliability. Our on-demand service allows you to pay only for what you use, ensuring a cost-effective approach to accessing cutting-edge AI capabilities. Get your API key today at https://deepapi.ai

    The version of the OpenAPI document: 1.0.0
    Contact: contact@deepapi.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from deep_api.models.chat_request import ChatRequest

class TestChatRequest(unittest.TestCase):
    """ChatRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatRequest:
        """Test ChatRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatRequest`
        """
        model = ChatRequest()
        if include_optional:
            return ChatRequest(
                model = 'llama-2-7b-chat',
                chats = [
                    [
                        deep_api.models.chat_request_chats_inner_inner.chat_request_chats_inner_inner(
                            role = 'user', 
                            content = '', )
                        ]
                    ],
                temperature = 0.1
            )
        else:
            return ChatRequest(
        )
        """

    def testChatRequest(self):
        """Test ChatRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
